"""
Vector store utilities using LangChain-Chroma with OpenAI embeddings.
"""
import os
import logging
from typing import List, Dict, Any

from langchain_core.documents import Document
from langchain_chroma import Chroma
from langchain_openai import OpenAIEmbeddings
from src.utils.ngrok import get_ngrok_url_with_retry
from src.data.sample_products import products as sample_products

PERSIST_DIRECTORY = '../../chroma_db'

logger = logging.getLogger(__name__)

class VectorStore:
    """Vector store for product search using LangChain-Chroma."""

    def __init__(self, persist_directory: str):
        """Initialize the in-memory Chroma vector store."""
        self.embeddings = OpenAIEmbeddings()
        self.vector_store = None

        # Get the directory of the current script
        script_dir = os.path.dirname(os.path.abspath(__file__))
        # Construct the persistence directory path relative to the script's location
        persist_directory = os.path.join(script_dir, persist_directory)
        self.persist_directory = persist_directory
        
        self.initialized = False
    
    def add_test_products(self):
        """TODO: Replace. Add test products to the vector store."""
        # Add demo products to the store - embeddings will be generated by SimpleEmbeddings
        self.add_products(sample_products)

    def initialize_collection(self, collection_name: str = "products"):
        """Initialize or get the collection."""
        try:
            logger.info(f"Initializing Chroma collection '{collection_name}' with persistence directory '{self.persist_directory}'...")
            
            self.vector_store = Chroma(
                collection_name=collection_name,
                embedding_function=self.embeddings,
                persist_directory=self.persist_directory,
            )
            self.initialized = True
            logger.info(f"LangChain-Chroma collection '{collection_name}' initialized.")
            return True
        except Exception as e:
            logger.error(f"Error initializing LangChain-Chroma collection: {e}")
            self.initialized = False
            return False
    
    def add_products(self, products: List[Dict[str, Any]]):
        """
        Add products to the vector store.
        
        Args:
            products: List of product dictionaries
        """
        if not self.initialized:
            logger.error("Vector store not initialized. Call initialize_collection first.")
            return False
        
        try:
            # Convert products to LangChain documents
            documents = []
            for i, product in enumerate(products):
                # Create a document from the product
                doc = Document(
                    page_content=f"{product['name']}: {product['description']}",
                    metadata=product
                )
                documents.append(doc)
            
            # Add documents to the vector store
            self.vector_store.add_documents(documents)
            logger.info(f"Added {len(products)} products to the vector store.")
            return True
        except Exception as e:
            logger.error(f"Error adding products to vector store: {e}")
            return False
    
    def search(self, query: str, limit: int = 3) -> List[Dict[str, Any]]:
        """
        Search for products using a text query.
        
        Args:
            query: The text query to search with
            limit: Maximum number of results to return
            
        Returns:
            List of matching products
        """
        if not self.initialized:
            logger.error("Vector store not initialized. Call initialize_collection first.")
            return []
        
        try:
            # Query the vector store
            results = self.vector_store.similarity_search(query, k=limit)
            
            # Extract and return the metadata (product information)
            if results:
                return [doc.metadata for doc in results]
            return []
        except Exception as e:
            logger.error(f"Error searching vector store: {e}")
            return []


vector_store = None

def get_vector_store(persist_directory: str = PERSIST_DIRECTORY):
    logger.info("Getting vector store instance...")
    global vector_store
    if vector_store is None:
        vector_store = VectorStore(persist_directory=persist_directory)
        vector_store.initialize_collection()
    return vector_store
